function output = stereoMatching(leftImg, rightImg)

    % Set a few variables that are critical
    DISPARITY_RANGE = 50;
    WIN_SIZE = 5;
    EXTEND = (WIN_SIZE-1)/2;
    
    % Convert the images to image matrix
    leftImgMatrix = imread(leftImg)
    rightImgMatrix = imread(rightImg)
    
   % Convert the images to grayscale
    lleft = rgb2gray(left)
    lright = rgb2gray(right)    
    % Get the important dimensions
    dim_rgb = size(leftImgMatrix)
    Nx = dim_rgb(2)
    Ny = dim_rgb(1)
    
   
    
    
    
    % Initialize a disparity that has the same dimensions as left and right
    DISPARITY = zeros(dim)
    
    for y=1:1:Ny
        for x=1:1:Nx
            bestDisparity = 0;
            bestNCC = 0; % Lowest NCC score
            for disp = 1:1:DISPARITY_RANGE
                Patch1 = lleft(y-EXTEND:y+EXTEND,x-disp-EXTEND:x-disp+EXTEND)
                Patch2 = lright(y-EXTEND:y+EXTEND,x-disp-EXTEND:x-disp+EXTEND)
                currNCC = NCC(Patch1, Patch2)
                if(currNCC > bestNCC)
                    bestNCC = currNCC;
                    bestDisparity = disp;
                end
            end
            DISPARITY(y,x) = bestDisparity;
        end
    end
    
    output = DISPARITY
end

% Take random pixel (x,y), same horizontal line, got to the same x location, but search in a small range